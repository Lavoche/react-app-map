{"version":3,"sources":["components/map-panel/index.js","components/map-panel/map-panel.js","components/input-panel/index.js","components/input-panel/input-panel.js","components/marker-list/index.js","components/marker-list/marker-list.js","components/app-header/index.js","components/app-header/app-header.js","service/ya-geocode.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/app/index.js","components/app/app.js","index.js"],"names":["ElementsMap","center","markers","onUpdateMarkerDetails","onUpdateCenter","linePointCoordinates","placeMarks","map","id","label","address","coordinates","push","geometry","key","options","draggable","modules","properties","balloonContentHeader","balloonContentBody","onDragEnd","e","pos","get","_coordinates","line","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","defaultState","zoom","onActionEnd","width","height","InputPanel","state","onLabelChange","setState","target","value","onSubmit","preventDefault","props","onMarkerAdd","this","className","type","placeholder","onChange","Component","MarkerList","onDeleteMarker","onChangeList","el","index","draggableId","toString","provided","ref","innerRef","draggableProps","dragHandleProps","onClick","res","destination","idx","startId","source","endId","droppableId","droppableProps","AppHeader","YaGeocode","_apiBase","getResource","url","a","fetch","ok","Error","status","json","getAddress","coord","reverse","join","_transformCoord","response","GeoObjectCollection","featureMember","GeoObject","name","description","ErrorIndicator","App","maxId","isReady","hasError","yaGeocode","addMarker","trim","newMarker","createMarkerItem","slice","then","catch","onError","deleteMarker","findIndex","updateCenter","getCenter","changeList","newArray","splice","removed","updateMarkerDetails","newItem","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","content","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.897a6782.chunk.js","sourcesContent":["import ElementsMap from \"./map-panel\";\r\n\r\nexport default ElementsMap;","import React from 'react';\r\nimport { FullscreenControl, Map, Placemark, Polyline, YMaps } from 'react-yandex-maps';\r\n\r\nconst MapPanel = ({ center, markers, onUpdateMarkerDetails, onUpdateCenter }) =>{\r\n\r\n        const linePointCoordinates = [];\r\n        const placeMarks= markers.map(({id, label, address, coordinates})=> {\r\n            linePointCoordinates.push(...[coordinates]);\r\n            return (\r\n                <Placemark\r\n                    geometry={coordinates}\r\n                    key={id}\r\n                    options={{\r\n                        draggable:true\r\n                    }}\r\n                    modules={['geoObject.addon.balloon']}\r\n                    properties={{\r\n                        balloonContentHeader: `${label}`,\r\n                        balloonContentBody: `${address}`\r\n                    }}\r\n                    onDragEnd={(e)=> {\r\n                        onUpdateMarkerDetails({\r\n                            id,\r\n                            pos: e.get('target').geometry._coordinates\r\n                        })\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n        const line =(\r\n            <Polyline\r\n                geometry={linePointCoordinates}\r\n                options={{\r\n                    balloonCloseButton: false,\r\n                    strokeColor: '#000',\r\n                    strokeWidth: 4,\r\n                    strokeOpacity: 0.5,\r\n                }}\r\n            />\r\n            );\r\n        return (\r\n            <YMaps>\r\n                <Map\r\n                    defaultState={{center, zoom: 9 }}\r\n                    onActionEnd={onUpdateCenter}\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                >\r\n                    {placeMarks}{line}\r\n                    <FullscreenControl />\r\n                </Map>\r\n            </YMaps>\r\n        );\r\n    }\r\nexport default MapPanel;","import InputPanel from \"./input-panel\";\r\n\r\nexport default InputPanel;","import React, { Component } from 'react';\r\nimport './input-panel.css';\r\n\r\nexport default class InputPanel extends Component {\r\n\r\n    state = {\r\n        label:''\r\n    }\r\n\r\n    onLabelChange = (e) => {\r\n        this.setState({\r\n            label:e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onMarkerAdd(this.state.label);\r\n        this.setState({label:''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} className=\"d-flex\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Введите наименование пункта\"\r\n                    onChange={this.onLabelChange}\r\n                    value={this.state.label}\r\n                />\r\n                <button className=\"btn btn-outline-success add-marker\">\r\n                    Добавить\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}","import MarkerList from \"./marker-list\";\r\n\r\nexport default MarkerList;","import React from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport './marker-list.css';\r\n\r\nconst MarkerList = ({ markers, onDeleteMarker, onChangeList }) => {\r\n\r\n    const el = markers.map(({ id, label }, index) => (\r\n        <Draggable key={id} draggableId={id.toString()} index={index}>\r\n            {(provided) =>\r\n                (<li\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    className=\"list-group-item\"\r\n                >\r\n                    <span>\r\n                        <span>\r\n                            {label}\r\n                        </span>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-outline-danger btn-md float-right\"\r\n                                onClick={() => onDeleteMarker(id)}\r\n                        >\r\n                            <i className=\"fa fa-trash-o\"/>\r\n                        </button>\r\n                    </span>\r\n                </li>)\r\n            }\r\n        </Draggable>\r\n        )\r\n    );\r\n    return(\r\n        <DragDropContext\r\n            onDragEnd={(res)=>\r\n            {\r\n                if (!res.destination) return;\r\n                const idx = {\r\n                    startId: res.source.index,\r\n                    endId: res.destination.index\r\n                };\r\n                onChangeList(idx);\r\n            }}\r\n        >\r\n            <Droppable droppableId=\"droppable\">\r\n                { (provided) => (\r\n                    <ul\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        className=\"list-group marker-list\"\r\n                    >\r\n                        {el}\r\n                    </ul>\r\n                    )\r\n                }\r\n            </Droppable>\r\n        </DragDropContext>\r\n\r\n    );\r\n}\r\n\r\nexport default MarkerList;\r\n","import AppHeader from \"./app-header\";\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport './app-header.css';\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h3 className=\"text-center\">Level II</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppHeader;","export default class YaGeocode {\r\n\r\n    _apiBase = \"https://geocode-maps.yandex.ru/1.x/?apikey=b4d2c5bf-1f62-4634-b76b-ade75cee0f23&format=json&geocode=\";\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n        if (!res.ok) {\r\n            throw new Error (`Couldn ot fetch ${url}` +\r\n                `, received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    };\r\n\r\n    getAddress = async (coord) => {\r\n        const res = await this.getResource(coord.reverse().join(','));\r\n        return this._transformCoord(res.response);\r\n    };\r\n    _transformCoord = (res) => {\r\n        const {name, description} = res.GeoObjectCollection.featureMember[0].GeoObject;\r\n        return `${name}, ${description}`;\r\n    }\r\n}","import ErrorIndicator from \"./error-indicator\";\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\n\r\nimport './error-indicator.css';\r\n\r\nconst ErrorIndicator = () => {\r\n    return (\r\n        <div className=\"error-indicator\">\r\n            <span className=\"boom\">Упс!</span>\r\n            <span>\r\n                Пожалуйста, проверьте соединение с интернетом!\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","import App from \"./app\";\r\n\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport MapPanel from \"../map-panel\";\r\nimport InputPanel from \"../input-panel\";\r\nimport MarkerList from \"../marker-list\";\r\nimport AppHeader from \"../app-header\";\r\nimport YaGeocode from \"../../service/ya-geocode\";\r\n\r\nimport './app.css';\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nexport default  class App extends Component {\r\n    maxId = 5;\r\n    state = {\r\n        markers: [],\r\n        center:[],\r\n        isReady: false,\r\n        hasError: false\r\n    }\r\n    yaGeocode = new YaGeocode();\r\n\r\n    createMarkerItem(label) {\r\n        const id = this.maxId++;\r\n        const { center } = this.state;\r\n        return {\r\n            id,\r\n            label,\r\n            address: '',\r\n            coordinates: center\r\n        }\r\n    }\r\n    addMarker = (label) => {\r\n        if (!label.trim()) return;\r\n        const { getAddress } = this.yaGeocode;\r\n        const newMarker = this.createMarkerItem(label);\r\n        const { center } = this.state;\r\n\r\n        getAddress(center.slice(0))\r\n            .then((address)=>{\r\n                this.setState(({markers}) => {\r\n                    newMarker.address = address;\r\n                    const newArray = [\r\n                        ...markers,\r\n                        newMarker\r\n                    ];\r\n                    return {\r\n                        markers: newArray\r\n                    }\r\n                });\r\n            })\r\n            .catch(this.onError);\r\n    }\r\n    deleteMarker = (id) => {\r\n        this.setState(({markers}) => {\r\n            const idx = markers.findIndex((el) => el.id===id)\r\n            const newArray = [\r\n                ...markers.slice(0, idx),\r\n                ...markers.slice(idx+1)\r\n            ]\r\n            return {\r\n                markers: newArray\r\n            }\r\n        });\r\n    };\r\n    updateCenter = (e) => {\r\n        const center = e.get('target').getCenter();\r\n        if (!center) return;\r\n        this.setState({center: center});\r\n    }\r\n    changeList = ({startId, endId}) =>{\r\n        if (endId===startId) return;\r\n        this.setState(({markers})=>{\r\n            const newArray = [...markers];\r\n            const [removed] = newArray.splice(startId, 1);\r\n            newArray.splice(endId, 0, removed);\r\n            return {\r\n                markers: newArray\r\n            }\r\n        });\r\n    }\r\n    updateMarkerDetails = ({id, pos}) => {\r\n        const { getAddress } = this.yaGeocode;\r\n        getAddress(pos.slice(0))\r\n            .then((address)=>{\r\n                this.setState(({markers})=> {\r\n                    const idx = markers.findIndex((el) => el.id===id)\r\n                    let newItem = {\r\n                        ...markers[idx]\r\n                    }\r\n                    newItem['coordinates'] = pos;\r\n                    newItem['address'] = address;\r\n                    return {\r\n                        markers: [\r\n                            ...markers.slice(0, idx),\r\n                            newItem,\r\n                            ...markers.slice(idx + 1)\r\n                        ]\r\n                    }\r\n                });\r\n            })\r\n            .catch(this.onError);\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(\r\n            ({coords})=>{\r\n                this.setState({\r\n                    center: [coords.latitude, coords.longitude],\r\n                    isReady: true\r\n                })\r\n            },\r\n            ()=>{\r\n                this.setState({\r\n                    center: [55.751574, 37.573856],\r\n                    isReady: true\r\n                })\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { markers, center, isReady, hasError } = this.state;\r\n\r\n        const content = (!hasError && isReady) ? <MapPanel\r\n                                        center={center}\r\n                                        onUpdateCenter={this.updateCenter}\r\n                                        markers={markers}\r\n                                        onUpdateMarkerDetails={this.updateMarkerDetails}\r\n                                    />\r\n                                 : null;\r\n        const errorMessage = hasError ? <ErrorIndicator /> : null;\r\n        return (\r\n            <div className=\"test-app\">\r\n                <AppHeader />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-7\">\r\n                        {content}\r\n                        {errorMessage}\r\n                    </div>\r\n                    <div className=\"col-md-5\">\r\n                        <InputPanel\r\n                            onMarkerAdd={this.addMarker}\r\n                        />\r\n                        <MarkerList\r\n                            markers={markers}\r\n                            onDeleteMarker={this.deleteMarker}\r\n                            onChangeList={this.changeList}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}